{"version":3,"sources":["../../app-es6/factories/ConnectionFactory.js"],"names":["dbVersion","dbName","storeList","currentConnection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_addStores","e","target","result","onsuccess","onerror","console","log","connection","forEach","objectStoreNames","contains","storeName","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,YAAY,CAAlB;AACA,IAAMC,SAAS,YAAf;AACA,IAAMC,YAAY,CAAC,aAAD,CAAlB;;AAEA,IAAIC,oBAAoB,IAAxB;;IAEaC,iB,WAAAA,iB;AACT,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACH;;;;wCAEsB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIL,sBAAsB,IAA1B,EAAgC;AAC5BI,4BAAQJ,iBAAR;AACA;AACH;;AAED,oBAAIM,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,SAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,UAAlB,CAA6BC,EAAEC,MAAF,CAASC,MAAtC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzBf,wCAAoBY,EAAEC,MAAF,CAASC,MAA7B;;AAEAV,4BAAQJ,iBAAR;AACH,iBAJD;;AAMAM,4BAAYU,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYN,CAAZ;AACAP,yDAAgCO,CAAhC;AACH,iBAHD;AAKH,aAvBM,CAAP;AAwBH;;;mCAEiBO,U,EAAY;AAC1BpB,sBAAUqB,OAAV,CAAkB,qBAAa;AAC3B,oBAAID,WAAWE,gBAAX,CAA4BC,QAA5B,CAAqCC,SAArC,CAAJ,EAAqD;AACjDJ,+BAAWK,iBAAX,CAA6BD,SAA7B;AACH;;AAEDJ,2BAAWM,iBAAX,CAA6BF,SAA7B,EAAwC;AACpCG,mCAAe;AADqB,iBAAxC;AAGH,aARD;AAUH","file":"ConnectionFactory.js","sourcesContent":["const dbVersion = 4\nconst dbName = \"aluraframe\"\nconst storeList = [\"negociacoes\"]\n\nlet currentConnection = null\n\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error(\"The class can not be instanced\")\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            if (currentConnection !== null) {\n                resolve(currentConnection)\n                return\n            }\n\n            var openRequest = window.indexedDB.open(dbName, dbVersion)\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._addStores(e.target.result)\n            }\n\n            openRequest.onsuccess = e => {\n                currentConnection = e.target.result\n\n                resolve(currentConnection)\n            }\n\n            openRequest.onerror = e => {\n                console.log(e)\n                reject(`ConexÃ£o falhou. Erro: ${e}`)\n            }\n\n        })\n    }\n\n    static _addStores(connection) {\n        storeList.forEach(storeName => {\n            if (connection.objectStoreNames.contains(storeName)) {\n                connection.deleteObjectStore(storeName)\n            }\n\n            connection.createObjectStore(storeName, {\n                autoIncrement: true\n            })\n        })\n\n    }\n}"]}