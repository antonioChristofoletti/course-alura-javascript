{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","Error","url","Promise","resolve","reject","HttpRequest","get","then","negociacoesList","response","map","Negociacao","Date","objeto","data","quantidade","valor","catch","rejection","_get","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","negociacaoDao","add","erro","removeAll","filterNegociacaoList","findAll","foundNegociacaoLista","filter","some","isEquals","negociacaoFilter"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;IAEaA,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,iBAAwB,IAAxB,4BAAN;AACH;;;;6BAEWC,G,EAAK;AACb,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,yCAAYC,GAAZ,CAAgBL,GAAhB,EACKM,IADL,CACU,oBAAY;AACd,wBAAMC,kBAAkBC,SAASC,GAAT,CAAa;AAAA,+BAAU,IAAIC,sBAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAb,CAAxB;;AAEAb,4BAAQK,eAAR;AACH,iBALL,EAMKS,KANL,CAMW,qBAAa;AAChBb,2BAAOc,SAAP;AACH,iBARL;AASH,aAVM,CAAP;AAWH;;;+CAE6B;AAAE,mBAAOnB,kBAAkBoB,IAAlB,CAAuB,oBAAvB,CAAP;AAAqD;;;iDAErD;AAAE,mBAAOpB,kBAAkBoB,IAAlB,CAAuB,sBAAvB,CAAP;AAAuD;;;sDAEpD;AAAE,mBAAOpB,kBAAkBoB,IAAlB,CAAuB,uBAAvB,CAAP;AAAwD;;;kCAE9EC,U,EAAY;AACzB,mBAAOC,qCACFC,aADE,GAEFf,IAFE,CAEG;AAAA,uBAAc,IAAIgB,4BAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGFjB,IAHE,CAGG;AAAA,uBAAiBkB,cAAcC,GAAd,CAAkBN,UAAlB,CAAjB;AAAA,aAHH,EAIFb,IAJE,CAIG;AAAA,uBAAK,+BAAL;AAAA,aAJH,EAKFU,KALE,CAKI,gBAAQ;AACX,sBAAM,IAAIjB,KAAJ,CAAU2B,IAAV,CAAN;AACH,aAPE,CAAP;AAQH;;;8CAE4B;AACzB,mBAAON,qCACFC,aADE,GAEFf,IAFE,CAEG;AAAA,uBAAc,IAAIgB,4BAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGFjB,IAHE,CAGG;AAAA,uBAAiBkB,cAAcG,SAAd,EAAjB;AAAA,aAHH,EAIFrB,IAJE,CAIG;AAAA,uBAAK,mCAAL;AAAA,aAJH,EAKFU,KALE,CAKI,gBAAQ;AACX,sBAAM,IAAIjB,KAAJ,CAAU2B,IAAV,CAAN;AACH,aAPE,CAAP;AAQH;;;0CAEwBE,oB,EAAsB;AAC3C,mBAAOR,qCACFC,aADE,GAEFf,IAFE,CAEG;AAAA,uBAAc,IAAIgB,4BAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGFjB,IAHE,CAGG;AAAA,uBAAiBkB,cAAcK,OAAd,EAAjB;AAAA,aAHH,EAIFvB,IAJE,CAIG,gCAAwB;AAC1B,uBAAOwB,qBAAqBC,MAArB,CAA4B,4BAAoB;AACnD,2BAAO,CAACH,qBAAqBI,IAArB,CAA0B;AAAA,+BAAcb,WAAWc,QAAX,CAAoBC,gBAApB,CAAd;AAAA,qBAA1B,CAAR;AACH,iBAFM,CAAP;AAGH,aARE,EASFlB,KATE,CASI,gBAAQ;AACX,sBAAM,IAAIjB,KAAJ,CAAU2B,IAAV,CAAN;AACH,aAXE,CAAP;AAYH","file":"NegociacaoService.js","sourcesContent":["import { Negociacao } from \"../models/Negociacao\"\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\"\nimport { ConnectionFactory } from \"../factories/ConnectionFactory\"\nimport { HttpRequest } from \"../services/HttpRequest\"\n\nexport class NegociacaoService {\n\n    constructor() {\n        throw new Error(`The class '${this}' can not be instances`)\n    }\n\n    static _get(url) {\n        return new Promise((resolve, reject) => {\n            HttpRequest.get(url)\n                .then(response => {\n                    const negociacoesList = response.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n\n                    resolve(negociacoesList)\n                })\n                .catch(rejection => {\n                    reject(rejection)\n                })\n        })\n    }\n\n    static getWeeklyNegociacoes() { return NegociacaoService._get(\"negociacoes/semana\") }\n\n    static getLastWeekNegociacoes() { return NegociacaoService._get(\"negociacoes/anterior\") }\n\n    static getRetreatedWeekNegociacoes() { return NegociacaoService._get(\"negociacoes/retrasada\") }\n\n    static adicionar(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(negociacaoDao => negociacaoDao.add(negociacao))\n            .then(_ => \"Elemento inserido com sucesso\")\n            .catch(erro => {\n                throw new Error(erro)\n            })\n    }\n\n    static removeNegociacaoAll() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(negociacaoDao => negociacaoDao.removeAll())\n            .then(_ => \"Negociações removidas com sucesso\")\n            .catch(erro => {\n                throw new Error(erro)\n            })\n    }\n\n    static getNegociacaoList(filterNegociacaoList) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(negociacaoDao => negociacaoDao.findAll())\n            .then(foundNegociacaoLista => {\n                return foundNegociacaoLista.filter(negociacaoFilter => {\n                    return !filterNegociacaoList.some(negociacao => negociacao.isEquals(negociacaoFilter))\n                })\n            })\n            .catch(erro => {\n                throw new Error(erro)\n            })\n    }\n}"]}