{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","cursor","openCursor","negociacoes","currentResult","target","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;AAAA;;;;IAEaA,a,WAAAA,a;AACT,2BAAYC,UAAZ,EAAwB;AAAA;;AACpB,aAAKC,WAAL,GAAmBD,UAAnB;AACH;;;;4BAEGE,U,EAAY;AAAA;;AACZ,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMC,UAAU,MAAKL,WAAL,CACXM,WADW,CACC,CAAC,aAAD,CADD,EACkB,WADlB,EAEXC,WAFW,CAEC,aAFD,EAGXC,GAHW,CAGPP,UAHO,CAAhB;;AAKAI,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQF,UAAR,CAAL;AAAA,iBAApB;;AAEAI,wBAAQK,OAAR,GAAkB,aAAK;AAAEN,iEAAwCO,CAAxC;AAA8C,iBAAvE;AACH,aATM,CAAP;AAUH;;;kCAES;AAAA;;AACN,mBAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMQ,SAAS,OAAKZ,WAAL,CACVM,WADU,CACE,CAAC,aAAD,CADF,EACmB,UADnB,EAEVC,WAFU,CAEE,aAFF,EAGVM,UAHU,EAAf;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOH,SAAP,GAAmB,aAAK;AACpB,wBAAIM,gBAAgBJ,EAAEK,MAAF,CAASC,MAA7B;;AAEA,wBAAIF,aAAJ,EAAmB;AACf,4BAAIG,OAAOH,cAAcI,KAAzB;AACAL,oCAAYM,IAAZ,CAAiB,IAAIC,sBAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEAT,sCAAcU,QAAd;AACH,qBALD,MAKO;AACHtB,gCAAQW,WAAR;AACH;AACJ,iBAXD;;AAaAF,uBAAOF,OAAP,GAAiB,aAAK;AAClBN,+FAAmEO,CAAnE;AACH,iBAFD;AAGH,aAxBM,CAAP;AAyBH;;;oCAEW;AAAA;;AACR,mBAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMC,UAAU,OAAKL,WAAL,CACXM,WADW,CACC,CAAC,aAAD,CADD,EACkB,WADlB,EAEXC,WAFW,CAEC,aAFD,EAGXmB,KAHW,EAAhB;;AAKArB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,SAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,aAAK;AAAEN,gFAAiDO,CAAjD;AAAuD,iBAAhF;AACH,aATM,CAAP;AAUH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from \"../models/Negociacao\"\n\nexport class NegociacaoDao {\n    constructor(connection) {\n        this._connection = connection\n    }\n\n    add(negociacao) {\n        return new Promise((resolve, reject) => {\n            const request = this._connection\n                .transaction([\"negociacoes\"], \"readwrite\")\n                .objectStore(\"negociacoes\")\n                .add(negociacao)\n\n            request.onsuccess = e => resolve(negociacao)\n\n            request.onerror = e => { reject(`Negociacao não includa. Erro: ${e}`) }\n        })\n    }\n\n    findAll() {\n        return new Promise((resolve, reject) => {\n            const cursor = this._connection\n                .transaction([\"negociacoes\"], \"readonly\")\n                .objectStore(\"negociacoes\")\n                .openCursor()\n\n            let negociacoes = []\n\n            cursor.onsuccess = e => {\n                let currentResult = e.target.result\n\n                if (currentResult) {\n                    var dado = currentResult.value\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor))\n\n                    currentResult.continue()\n                } else {\n                    resolve(negociacoes)\n                }\n            }\n\n            cursor.onerror = e => {\n                reject(`Não foi possível encontrar a lista de negociacoes. Erro: ${e}`)\n            }\n        })\n    }\n\n    removeAll() {\n        return new Promise((resolve, reject) => {\n            const request = this._connection\n                .transaction([\"negociacoes\"], \"readwrite\")\n                .objectStore(\"negociacoes\")\n                .clear()\n\n            request.onsuccess = _ => resolve()\n\n            request.onerror = e => { reject(`Negociações não foram removidas. Erro: ${e}`) }\n        })\n    }\n}"]}